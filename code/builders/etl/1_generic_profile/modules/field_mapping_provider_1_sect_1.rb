module FieldMappingProvider1Sect1

  def build_hash_field_rule()

    @field_rule_values = {}

    @field_rule_values = {
      'driv_birth_place_str' => 'infield[:pol_residence_str].upcase.strip',
      'driv_birth_province_str' => 'infield[:pol_residence_province_str].upcase.strip',
      'driv_birth_state_str' => 'infield[:driv_citizenship_str].upcase.strip',
      'driv_citizenship_str' => 'infield[:driv_citizenship_str].upcase.strip',
      'driv_civil_status_str' => '"Coniugato senza figli"',
      'driv_driver_sex_str' => 'x = infield[:driv_driver_sex_str].slice(0,1); x=="S" ? x="C": x=x',
      'driv_driving_license_points_str' => '20',
      'driv_driving_license_type_str' => '"B"',
      'driv_driving_license_year_of_issue_str' => '(DateTime::now - infield[:driv_driver_sex_str].slice(1, 2).to_i.years-2.months + 18.years).strftime("%G")',
      'driv_driving_license_month_of_issue_str' => '(DateTime::now - infield[:driv_driver_sex_str].slice(1, 2).to_i.years-2.months + 18.years).strftime("%m")',
      'driv_driving_license_yrs_str' => '(infield[:driv_driver_sex_str].slice(1, 2).to_i - 18).to_s',
      'driv_heir_str' => '"no"',
      'driv_italian_residence_starting_yrs_num' => '(DateTime::now - 5.years).strftime("%Y")',
      'driv_job_2_str' => '"campo tecnico per genertel"',
      'driv_job_str' => 'infield[:driv_job_str] == \'\' ? nil : infield[:driv_job_str].downcase',
      'driv_residence_same_as_home_address_str' => '"si"',
      'driv_studies_str' => '"Diploma"',
      'own_owner_sex_str' => 'infield[:driv_driver_sex_str].upcase.slice(0,1)',
      'own_owner_specification_str' => 'x = infield[:driv_driver_sex_str].upcase.slice(0,1); x=="S" ? x="C": x=x',
      'own_owner_zip_code_str' => 'infield[:pol_driver_zip_code_str].strip',
      'pol_act_of_vandalism_code_str' => nil,
      'pol_act_of_vandalism_minimum_uncoverage_str' => nil,
      'pol_act_of_vandalism_premium_id_str' => nil,
      'pol_act_of_vandalism_str' => nil,
      'pol_act_of_vandalisme_web_id_str' => nil,
      'pol_additional_drivers_less_than_26_yrs_str' => '"no"',
      'pol_already_benefit_from_bersani_str' => '"no"',
      'pol_assistance_premium_id_str' => nil,
      'pol_assistance_str' => nil,
      'pol_assistance_web_id_str' => nil,
      'pol_athmospheric_events_premium_id_str' => nil,
      'pol_athmospheric_events_str' => nil,
      'pol_athmospheric_events_web_id_str' => nil,
      'pol_bersani_policy_expiring_date_str' => '(DateTime::now + 3.months).strftime("%F")',
      'pol_bersani_ref_car_already_insured_with_company_str' => '"no"',
      'pol_bersani_ref_vehicle_insured_with_company_str' => '"no"',
      'pol_bersani_ref_vehicle_number_plate_str' => '"ab123cd"',
      'pol_bersani_str' => 'infield[:pol_bersani_str].downcase.strip',
      'pol_birth_date_day_str' => ' infield[:driv_driver_sex_str].length == 3 ? (DateTime::now - infield[:driv_driver_sex_str].slice(1 ,2).to_i.years-2.months).strftime("%F").slice(8,2) : (DateTime::now - 30.years-2.months).strftime("%F").slice(8,2)',
      'pol_birth_date_month_str' => ' infield[:driv_driver_sex_str].length == 3 ? (DateTime::now - infield[:driv_driver_sex_str].slice(1 ,2).to_i.years-2.months).strftime("%F").slice(5,2) : (DateTime::now - 30.years-2.months).strftime("%F").slice(5,2)',
      'pol_birth_date_str' => ' infield[:driv_driver_sex_str].length == 3 ? (DateTime::now - infield[:driv_driver_sex_str].slice(1, 2).to_i.years-2.months).strftime("%F") : (DateTime::now - 30.years-2.months).strftime("%F") ',
      'pol_birth_date_year_num' => ' infield[:driv_driver_sex_str].length == 3 ? (DateTime::now - infield[:driv_driver_sex_str].slice(1 ,2).to_i.years-2.months).strftime("%F").slice(0,4).to_i : (DateTime::now - 30.years-2.months).strftime("%F").slice(0,4).to_i',
      'pol_blukasko_premium_id_str' => nil,
      'pol_blukasko_str' => nil,
      'pol_blukasko_web_id_str' => nil,
      'pol_BM_assigned_str' => 'infield[:pol_BM_assigned_str].strip',
      'pol_car_already_insured_with_company_str' => '"no"',
      'pol_claims_total_number_str' => 'infield[:pol_claims_total_number_str].strip',
      'pol_client_type_str' => 'x = infield[:driv_driver_sex_str].upcase.slice(0,1); x=="S" ? x="persona giuridica": x="persona fisica"',
      'pol_cohabiting_children_str' => '"si"',
      'pol_coming_from_BM_num' => 'bm=infield[:pol_BM_assigned_srt]; claimsyear=infield[:pol_nr_of_paid_claims_this_yr_str]; bm.to_i == -1 ? bm ="-1" : if claimsyear.to_i > 0 && bm.to_i > 3 ;  bm= bm.to_i - 2;  else  bm = bm.to_i + 1 end',
      'pol_coming_from_company_str' => '"generali"',
      'pol_contingency_protection_premium_id_str' => nil,
      'pol_contingency_protection_str' => nil,
      'pol_contingency_protection_web_id_str' => nil,
      'pol_current_policy_guarantee_str' => '"nessuna"',
      'pol_defined_drive_str' => 'if infield[:pol_driver_less_than_26_yrs_str]=="N"; x= "si" else x= "no" end',
      'pol_driver_accident_coverage_premium_id_str' => nil,
      'pol_driver_accident_coverage_str' => nil,
      'pol_driver_accident_coverage_web_id_str' => nil,
      'pol_driver_accident_indemnity_limit_str' => nil,
      'pol_driver_is_owner_str' => 'if infield[:driv_driver_sex_str]=="C"; x= "no" else x= "si" end',
      'pol_driver_less_25_yrs_license_less_2_yrs_str' => 'infield[:pol_driver_less_than_26_yrs_str].upcase.strip',
      'pol_driver_less_than_26_yrs_str' => 'infield[:pol_driver_less_than_26_yrs_str].upcase.strip',
      'pol_driver_zip_code_str' => 'infield[:pol_driver_zip_code_str].strip',
      'pol_driving_licence_withdrawal_guarantee_premium_id_str' => nil,
      'pol_driving_licence_withdrawal_guarantee_str' => nil,
      'pol_driving_licence_withdrawal_guarantee_web_id_str' => nil,
      'pol_driving_license_suspension_str' => '"no"',
      'pol_driving_license_withdrawal_indemnity_limit_str' => nil,
      'pol_driving_type_str' => 'if infield[:pol_driver_less_than_26_yrs_str].upcase=="N" ; x= "esperta" else x= "libera" end',
      'pol_drunkenness_fine_str' => '"no"',
      'pol_easy_driver_premium_id_str' => nil,
      'pol_easy_driver_str' => nil,
      'pol_easy_driver_web_id_str' => nil,
      'pol_exclusive_drive_str' => '"no"',
      'pol_family_car_num' => '1',
      'pol_family_members_insured_with_company_str' => '0',
      'pol_free_drive_str' => 'if infield[:pol_driver_less_than_26_yrs_str].upcase=="N"; x= "si" else x= "no" end',
      'pol_glasses_minimum_uncovered_str' => nil,
      'pol_glasses_premium_id_str' => nil,
      'pol_glasses_str' => nil,
      'pol_glasses_web_id_str' => nil,
      'pol_how_do_you_know_the_company_str' => '"passaparola"',
      'pol_instalment_str' => 'infield[:pol_instalment_str].downcase.strip',
      'pol_insurance_situation_str' => 'infield[:pol_insurance_situation_str].downcase.strip == "veicolo gia\' assicurato con atr" ? a=infield[:pol_insurance_situation_str].downcase.strip : if infield[:pol_matriculation_date_str].to_i == 0; a=infield[:pol_insurance_situation_str].downcase.strip + " nuovo"; else a=infield[:pol_insurance_situation_str].downcase.strip + " usato" end ; b= a.gsub(/à/,"a" ); c= b.gsub(/è/,"e" ); d= c.gsub(/é/,"e" ); e= d.gsub(/ì/,"i" ); f= e.gsub(/ò/,"o" ); g= f.gsub(/ù/,"u" ); h= g.gsub(/°/,"a" ); ',
      'pol_kasko_minimum_uncoverage' => nil,
      'pol_kasko_minimum_uncoverage_str' => nil,
      'pol_kasko_premium_id_str' => nil,
      'pol_kasko_str' => nil,
      'pol_kasko_web_id_str' => nil,
      'pol_leasing_str' => '"no"',
      'pol_legal_assistance_premium_id_str' => nil,
      'pol_legal_assistance_str' => nil,
      'pol_legal_assistance_web_id_str' => nil,
      'pol_matriculation_date_day_str' => ' ageveh = infield[:pol_matriculation_date_str].to_i;  if  ageveh > 0  ; (DateTime::now - ageveh.years).strftime("%F").slice(8,2) else  (DateTime::now).strftime("%F").slice(8,2) end',
      'pol_matriculation_date_month_str' => ' ageveh = infield[:pol_matriculation_date_str].to_i;  if  ageveh > 0 ;  (DateTime::now - ageveh.years).strftime("%F").slice(5,2) else   (DateTime::now).strftime("%F").slice(5,2) end',
      'pol_matriculation_date_str' => 'ageveh = infield[:pol_matriculation_date_str].to_i;  if  ageveh > 0 ;  (DateTime::now - ageveh.years).strftime("%F") else   (DateTime::now).strftime("%F")  end',
      'pol_matriculation_date_year_num' => ' ageveh = infield[:pol_matriculation_date_str].to_i;  if  ageveh > 0 ;  (DateTime::now - ageveh.years).strftime("%F").slice(0,4).to_i else   (DateTime::now).strftime("%F").slice(0,4).to_i  end',
      'pol_minikasko_str' => '"no"',
      'pol_motorcycle_driving_ability_str' => nil,
      'pol_natural_events_act_of_vandalism' => nil,
      'pol_natural_events_act_of_vandalism_minimum_uncoverage_str' => nil,
      'pol_natural_events_act_of_vandalism_premium_id_str' => nil,
      'pol_natural_events_act_of_vandalism_str' => nil,
      'pol_natural_events_act_of_vandalism_web_id_str' => nil,
      'pol_natural_events_premium_id_str' => nil,
      'pol_natural_events_str' => nil,
      'pol_natural_events_web_id_str' => nil,
      'pol_nr_of_paid_claims_1_yr_str' => 'yearscert= infield[:pol_nr_of_yrs_insured_in_the_last_5_yrs_str]; claimscert=infield[:pol_claims_total_number_str]; claimslastyr = infield[:pol_nr_of_paid_claims_this_yr_str]; if yearscert.to_i == 5 && claimscert.to_i == 2 &&  claimslastyr.to_i == 2; x="1"   else x="0" end',
      'pol_nr_of_paid_claims_2_yr_str' => 'yearscert= infield[:pol_nr_of_yrs_insured_in_the_last_5_yrs_str];claimscert=infield[:pol_claims_total_number_str];claimslastyr = infield[:pol_nr_of_paid_claims_this_yr_str]; if yearscert.to_i < 2; x="N/A"  elsif yearscert.to_i == 2; x="0"  elsif yearscert.to_i == 3; if claimscert.to_i == 2 &&  claimslastyr.to_i == 0  or claimscert.to_i == 1 &&  claimslastyr.to_i == 0 ; x="1" else  x="0" end ;  elsif yearscert.to_i == 4; if claimscert.to_i == 1 &&  claimslastyr.to_i == 0; x="1" else  x="0" end ;   elsif yearscert.to_i == 5; if claimscert.to_i == 2 &&  claimslastyr.to_i == 0 or claimscert.to_i == 2 &&  claimslastyr.to_i == 1 or claimscert.to_i == 1 &&  claimslastyr.to_i == 0; x="1" else  x="0" end ;end',
      'pol_nr_of_paid_claims_3_yr_str' => 'yearscert= infield[:pol_nr_of_yrs_insured_in_the_last_5_yrs_str]; claimscert=infield[:pol_claims_total_number_str]; if yearscert.to_i < 3; x="N/A" else if claimscert.to_i == 2; x="1" else x="0" end end',
      'pol_nr_of_paid_claims_4_yr_str' => 'yearscert= infield[:pol_nr_of_yrs_insured_in_the_last_5_yrs_str]; if yearscert.to_i== 5 or yearscert.to_i == 4 ; x=  "0"   else   x="N/A"   end',
      'pol_nr_of_paid_claims_5_yr_str' => 'yearscert= infield[:pol_nr_of_yrs_insured_in_the_last_5_yrs_str]; if yearscert.to_i== 5 ;  x=  "0"   else   x="N/A"   end',
      'pol_nr_of_paid_claims_this_yr_str' => 'infield[:pol_nr_of_paid_claims_this_yr_str].strip',
      'pol_nr_of_yrs_insured_in_the_last_5_yrs_str' => 'infield[:pol_nr_of_yrs_insured_in_the_last_5_yrs_str].strip',
      'pol_nr_of_yrs_without_claims_str' => 'infield[:pol_nr_of_yrs_insured_in_the_last_5_yrs_str].to_i - infield[:pol_claims_total_number_str].to_i',
      'pol_number_of_NI_NA_yrs_during_5_yrs_str' => '(5 - infield[:pol_nr_of_yrs_insured_in_the_last_5_yrs_str].to_i).to_s',
      'pol_number_plate_type_str' => '"definitiva"',
      'pol_on_off_act_of_vandalism_str' => nil,
      'pol_on_off_assistance_str' => nil,
      'pol_on_off_athmospheric_events_str' => nil,
      'pol_on_off_blukasko_str' => nil,
      'pol_on_off_contingency_protection_str' => nil,
      'pol_on_off_driver_accident_coverage_str' => nil,
      'pol_on_off_driving_licence_withdrawal_guarantee_str' => nil,
      'pol_on_off_easy_driver_str' => nil,
      'pol_on_off_glasses_str' => nil,
      'pol_on_off_kasko_str' => nil,
      'pol_on_off_legal_assistance_str' => nil,
      'pol_on_off_natural_events_act_of_vandalism_str' => nil,
      'pol_on_off_natural_events_str' => nil,
      'pol_on_off_road_assistance_str' => nil,
      'pol_on_off_social_political_and_natural_events_str' => nil,
      'pol_on_off_social_political_events_str' => nil,
      'pol_on_off_supplementary_coverage_str' => nil,
      'pol_on_off_theft_fire_coverage_str' => nil,
      'pol_other_vehicle_use_str' => '"no"',
      'pol_partner_garages_str' => '"no"',
      'pol_passenger_str' => '"si"',
      'pol_payment_str' => '"carta di credito"',
      'pol_policy_starting_date_day_str' => '"si calcola runtime"',
      'pol_policy_starting_date_month_str' => '"si calcola runtime"',
      'pol_policy_starting_date_str' => '"si calcola runtime"',
      'pol_policy_starting_date_year_num' => '1876',
      'pol_privacy_1_str' => '"id elemento web1"',
      'pol_privacy_2_str' => '"id elemento web2"',
      'pol_privacy_3_str' => '"id elemento web3"',
      'pol_property_type_to_be_insured_str' => '"autovettura"',
      'pol_public_liability_exemption_str' => '"no"',
      'pol_public_liability_indemnity_limit_str' => 'infield[:pol_public_liability_indemnity_limit_str].strip',
      'pol_public_liability_type_str' => nil,
      'pol_quotation_str' => '"bonus/malus"',
      'pol_record_id_str' => 'infield[:pol_record_id_str].strip',
      'pol_renounce_compensation_str' => '"si"',
      'pol_residence_province_str' => 'infield[:pol_residence_province_str].strip',
      'pol_residence_str' => 'infield[:pol_residence_str].strip',
      'pol_risk_certificate_str' => '"si"',
      'pol_road_assistance_indemnity_limit_str' => nil,
      'pol_road_assistance_premium_id_str' => nil,
      'pol_road_assistance_str' => nil,
      'pol_road_assistance_type_str' => nil,
      'pol_road_assistance_web_id_str' => nil,
      'pol_second_driver_str' => '"no"',
      'pol_social_political_and_natural_events' => nil,
      'pol_social_political_and_natural_events_premium_id_str' => nil,
      'pol_social_political_and_natural_events_str' => nil,
      'pol_social_political_and_natural_events_web_id_str' => nil,
      'pol_social_political_events_premium_id_str' => nil,
      'pol_social_political_events_str' => nil,
      'pol_social_political_events_web_id_str' => nil,
      'pol_subscriber_is_driver_str' => 'if infield[:driv_driver_sex_str].upcase=="C"; x= "no" else x= "si" end',
      'pol_subscriber_is_holder_str' => '"si"',
      'pol_subscriber_is_owner_str' => '"si"',
      'pol_supplementary_coverage_premium_id_str' => nil,
      'pol_supplementary_coverage_str' => nil,
      'pol_supplementary_coverage_web_id_str' => nil,
      'pol_theft_fire_coverage_code_str' => nil,
      'pol_theft_fire_coverage_premium_id_str' => nil,
      'pol_theft_fire_coverage_web_id_str' => nil,
      'pol_theft_fire_minimum_uncoverage_exemption_str' => nil,
      'pol_type_of_contract_str' => '"bonus/malus"',
      'pol_vehicle_continuous_use_no_of_mths_str' => nil,
      'veh_abs_str' => '"si"',
      'veh_accesories_value_str' => '0',
      'veh_airbag_str' => '"si"',
      'veh_alarm_str' => '"immobilizer"',
      'veh_antiskid_str' => '"no"',
      'veh_bersani_reference_vehicle_str' => '"no"',
      'veh_capacity_num' => 'infield[:veh_capacity_num]',
      'veh_corrosive_oily_gas_liquid_transportation_str' => nil,
      'veh_fuel_str' => 'infield[:veh_fuel_str].strip',
      'veh_full_load_total_weight_num' => nil,
      'veh_gas_methane_supply_str' => '"no"',
      'veh_gprs_str' => '"no"',
      'veh_habitual_vehicle_use_str' => 'infield[:veh_habitual_vehicle_use_str].downcase.strip',
      'veh_home_delivery_str' => '"no"',
      'veh_hook_str' => nil,
      'veh_inflammable_liquid_transportation_str' => nil,
      'veh_km_per_yr_num' => '15000',
      'veh_kw_num' => 'infield[:veh_kw_num]',
      'veh_liquid_fuel_transportation_str' => nil,
      'veh_loading_unloading_str' => nil,
      'veh_make_str' => 'a=infield[:veh_make_str].strip; b= a.gsub(/à/,"a" );c= b.gsub(/è/,"e" );d= c.gsub(/é/,"e" );e= d.gsub(/ì/,"i" );f= e.gsub(/ò/,"o" );g= f.gsub(/ù/,"u" ); h= g.gsub(/°/,"a" ); f= h.gsub(/ª/,"a" );',
      'veh_marble_blocks_str' => nil,
      'veh_model_str' => 'a=infield[:veh_model_str].strip; b= a.gsub(/à/,"a" );c= b.gsub(/è/,"e" );d= c.gsub(/é/,"e" );e= d.gsub(/ì/,"i" );f= e.gsub(/ò/,"o" );g= f.gsub(/ù/,"u" ); h= g.gsub(/°/,"a" ); f= h.gsub(/ª/,"a" );',
      'veh_modification_made_str' => '"no"',
      'veh_new_used_vehicle_str' => 'if infield[:pol_matriculation_date_str].to_i > 0 ; x= "U" else x= "N" end',
      'veh_passenger_transportation_str' => nil,
      'veh_product_sector_str' => nil,
      'veh_purchase_date_day_str' => ' ageveh= infield[:pol_matriculation_date_str].to_i; sitass=infield[:pol_insurance_situation_str];  if sitass=~/1°*\\s*[(A-Za-z0-9)*(\\s)*]*/ ; (DateTime::now - 2.months).strftime("%F").slice(8, 2)  else (DateTime::now - ageveh.years).strftime("%F").slice(8, 2) end',
      'veh_purchase_date_month_str' => ' ageveh= infield[:pol_matriculation_date_str].to_i; sitass=infield[:pol_insurance_situation_str];  if sitass=~/1°*\\s*[(A-Za-z0-9)*(\\s)*]*/ ;  (DateTime::now - 2.months).strftime("%F").slice(5, 2)  else (DateTime::now - ageveh.years).strftime("%F").slice(5, 2) end',
      'veh_purchase_date_str' => ' ageveh= infield[:pol_matriculation_date_str].to_i; sitass=infield[:pol_insurance_situation_str];  if sitass=~/1°*\\s*[(A-Za-z0-9)*(\\s)*]*/ ;  (DateTime::now - 2.months).strftime("%F") else (DateTime::now - ageveh.years).strftime("%F") end',
      'veh_purchase_date_year_num' => ' ageveh= infield[:pol_matriculation_date_str].to_i; sitass=infield[:pol_insurance_situation_str];  if sitass=~/1°*\\s*[(A-Za-z0-9)*(\\s)*]*/ ;  (DateTime::now - 2.months).strftime("%F").slice(0, 1).to_i else (DateTime::now - ageveh.years).strftime("%F").slice(0,1).to_i end',
      'veh_radioactive_substances_transportation_str' => nil,
      'veh_rent_str' => '"no"',
      'veh_rent_with_driver_str' => '"no"',
      'veh_set_up_str' => 'a=infield[:veh_set_up_str].strip; b= a.gsub(/à/,"a" );c= b.gsub(/è/,"e" );d= c.gsub(/é/,"e" );e= d.gsub(/ì/,"i" );f= e.gsub(/ò/,"o" );g= f.gsub(/ù/,"u" ); h= g.gsub(/°/,"a" ); f= h.gsub(/ª/,"a" );',
      'veh_make_previous_vehicle_str'=> nil,
      'veh_set_up_previous_vehicle_str'=> nil,
      'veh_stabilizer_str' => '"no"',
      'veh_third_party_str' => nil,
      'veh_tow_hook_str' => '"no"',
      'veh_toxic_gas_explosive_transportation_str' => nil,
      'veh_transportation_of_dangerous_goods_A_str' => nil,
      'veh_transportation_of_dangerous_goods_B_str' => nil,
      'veh_transportation_type_str' => nil,
      'veh_truck_tractor_weight_num' => nil,
      'veh_use_for_shops_str' => nil,
      'veh_vehicle_for_disabled_str' => '"no"',
      'veh_vehicle_shelter_str' => '"box privato"',
      'veh_vehicle_type_str' => '"autovettura"',
      'veh_vehicle_use_str' => '"privato"',
      'veh_vehicle_value_str' => '"5000"',
      'veh_weight_to_be_towed_num' => nil,
      'veh_num_of_owners_str' => '"1"'
      }
  end

end