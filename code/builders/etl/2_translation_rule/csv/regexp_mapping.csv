quixa#sect_1#quixa#driv_job_str#job=infield[:driv_job_str];  regexpi_mod_array = job.split(" "); regexp_mod = "regexpi:([A-Za-z0-9])*";regexpi_mod_array.each do |el|; regexp_mod = regexp_mod + "(" + el.to_s + ".*)+(\\s)*" end;regexp_mod = regexp_mod + "\\b"; 
quixa#sect_1#quixa#veh_make_str#make=infield[:veh_make_str];  regexpi_mod_array = make.split(" "); regexp_mod = "regexpi:([A-Za-z0-9])*";regexpi_mod_array.each do |el|; regexp_mod = regexp_mod + "(" + el.to_s + ".*)+(\\s)*" end;regexp_mod = regexp_mod + "\\b"; 
quixa#sect_1#quixa#veh_model_str#make=infield[:veh_model_str];  regexpi_mod_array = make.split(" "); regexp_mod = "regexpi:([A-Za-z0-9])*";regexpi_mod_array.each do |el|; regexp_mod = regexp_mod + "(" + el.to_s + ".*)+(\\s)*" end;regexp_mod = regexp_mod + "\\b"; 
quixa#sect_1#quixa#veh_set_up_str#make=infield[:veh_set_up_str];  regexpi_mod_array = make.split(" "); regexp_mod = "regexpi:([A-Za-z0-9])*";regexpi_mod_array.each do |el|; regexp_mod = regexp_mod + "(" + el.to_s + ".*)+(\\s)*" end;regexp_mod = regexp_mod + "\\b";
quixa#sect_1#conte#driv_job_str#job=infield[:driv_job_str]; jregexp_mod = "regexpi:([A-Za-z0-9])*";jregexpi_mod_array = job.split("/"); jregexpi_mod_array.each do |el| ; el.split("/"); el.each do |el2|; jregexp_mod = jregexp_mod + "(" + el2.to_s + ".*)*(\\s)*" end; end ; jregexp_mod = jregexp_mod + "\\b" ;
quixa#sect_1#conte#veh_make_str#make=infield[:veh_make_str];  regexpi_mod_array = make.split(" "); regexp_mod = "regexpi:([A-Za-z0-9])*";regexpi_mod_array.each do |el|; regexp_mod = regexp_mod + "(" + el.to_s + ".*)+(\\s)*" end;regexp_mod = regexp_mod + "\\b"; 
quixa#sect_1#conte#veh_model_str#make=infield[:veh_model_str];  regexpi_mod_array = make.split(" "); regexp_mod = "regexpi:([A-Za-z0-9])*";regexpi_mod_array.each do |el|; regexp_mod = regexp_mod + "(" + el.to_s + ".*)+(\\s)*" end;regexp_mod = regexp_mod + "\\b"; 
quixa#sect_1#conte#veh_set_up_str#make=infield[:veh_set_up_str]; make= make.gsub(/(\s)+ie(\s)+/i, " i.e. ");  regexpi_mod_array = make.split(" "); regexp_mod = "regexpi:([A-Za-z0-9])*";regexpi_mod_array.each do |el|; regexp_mod = regexp_mod + "(" + el.to_s + ".*)+(\\s)*" end;regexp_mod = regexp_mod + "\\b"; 
quixa#sect_1#dialogo#driv_job_str#job=infield[:driv_job_str]; jregexp_mod = "regexpi:([A-Za-z0-9])*";jregexpi_mod_array = job.split("/"); jregexpi_mod_array.each do |el| ; el.split("/"); el.each do |el2|; jregexp_mod = jregexp_mod + "(" + el2.to_s + ".*)*(\\s)*" end; end ; jregexp_mod = jregexp_mod + "\\b" ;
quixa#sect_1#dialogo#veh_make_str#make=infield[:veh_make_str];  regexpi_mod_array = make.split(" "); regexp_mod = "regexpi:([A-Za-z0-9])*";regexpi_mod_array.each do |el|; regexp_mod = regexp_mod + "(" + el.to_s + ".*)+(\\s)*" end;regexp_mod = regexp_mod + "\\b"; 
quixa#sect_1#dialogo#veh_model_str#make=infield[:veh_model_str]; make= make.gsub(/[0-9]+ª(\s)+s.*/i, ""); regexpi_mod_array = make.split("/"); regexpi_mod_array = regexpi_mod_array[0].split(" "); regexpi_mod_array = make.split(" "); regexp_mod = "regexpi:([A-Za-z0-9])*";regexpi_mod_array.each do |el|; regexp_mod = regexp_mod + "(" + el.to_s + ".*)+(\\s)*" end;regexp_mod = regexp_mod + "\\b"; 
quixa#sect_1#dialogo#veh_set_up_str#kw=infield[:veh_kw_str];make=infield[:veh_set_up_str]; make= make.gsub(/tddi/i, "TD DI");  make= make.gsub(/tdci/i, "TD CI");  make= make.gsub(/turbodiesel/i, "TD"); regexpi_mod_array = make.split(" "); regexp_mod = "regexpi:([A-Za-z0-9])*(\\s)*(?=.*?\\b" + regexpi_mod_array[0].to_s + "+" ; index=0 ;for index in (1..regexpi_mod_array.length-1);regexp_mod = regexp_mod + "((?=.*?\\b" + regexpi_mod_array[index].to_s + "\\b))*" end; regexp_mod = regexp_mod + ").+";
quixa#sect_1#directline#driv_job_str# job=infield[:driv_job_str]; jregexp_mod = "regexpi:([A-Za-z0-9])*";jregexpi_mod_array = job.split("/"); jregexpi_mod_array.each do |el| ; el.split("/"); el.each do |el2|; jregexp_mod = jregexp_mod + "(" + el2.to_s + ".*)*(\\s)*" end; end ; jregexp_mod = jregexp_mod + "\\b" ;
quixa#sect_1#directline#veh_make_str#make=infield[:veh_make_str];  regexpi_mod_array = make.split(" "); regexp_mod = "regexpi:([A-Za-z0-9])*";regexpi_mod_array.each do |el|; regexp_mod = regexp_mod + "(" + el.to_s + ".*)+(\\s)*" end;regexp_mod = regexp_mod + "\\b"; 
quixa#sect_1#directline#veh_model_str#make=infield[:veh_model_str]; make= make.gsub(/ª s$/i, " s"); make= make.gsub(/ª/, " "); regexpi_mod_array = make.split(" "); regexp_mod = "regexpi:([A-Za-z0-9])*";regexpi_mod_array.each do |el|; regexp_mod = regexp_mod + "(" + el.to_s + ".*)+(\\s)*" end;regexp_mod = regexp_mod + "\\b"; 
quixa#sect_1#directline#veh_set_up_str#make=infield[:veh_set_up_str]; make= make.gsub(/ª/, "a"); regexpi_mod_array = make.split(" "); regexp_mod = "regexpi:([A-Za-z0-9])*";regexpi_mod_array.each do |el|; regexp_mod = regexp_mod + "(" + el.to_s + ".*)+(\\s)*" end;regexp_mod = regexp_mod + "\\b"; 
quixa#sect_1#genertel#driv_job_str#job=infield[:driv_job_str]; jregexp_mod = "regexpi:([A-Za-z0-9])*";jregexpi_mod_array = job.split("/"); jregexpi_mod_array.each do |el| ; el.split("/"); el.each do |el2|; jregexp_mod = jregexp_mod + "(" + el2.to_s + ".*)*(\\s)*" end; end ; jregexp_mod = jregexp_mod + "\\b" ;
quixa#sect_1#genertel#veh_make_str#make=infield[:veh_make_str];  regexpi_mod_array = make.split(" "); regexp_mod = "regexpi:([A-Za-z0-9])*";regexpi_mod_array.each do |el|; regexp_mod = regexp_mod + "(" + el.to_s + ".*)+(\\s)*" end;regexp_mod = regexp_mod + "\\b"; 
quixa#sect_1#genertel#veh_model_str#make=infield[:veh_model_str]; make= make.gsub(/ª s$/i, " s"); make= make.gsub(/ª/, " "); regexpi_mod_array = make.split(" "); regexp_mod = "regexpi:([A-Za-z0-9])*";regexpi_mod_array.each do |el|; regexp_mod = regexp_mod + "(" + el.to_s + ".*)+(\\s)*" end;regexp_mod = regexp_mod + "\\b"; 
quixa#sect_1#genertel#veh_set_up_str#make=infield[:veh_set_up_str]; make= make.gsub(/(\s)+ie(\s)+/i, " i.e. "); regexpi_mod_array = make.split(" "); regexp_mod = "regexpi:([A-Za-z0-9])*(\\s)*(?=.*?\\b" + regexpi_mod_array[0].to_s + "+" ; index=0 ;for index in (1..regexpi_mod_array.length-1);regexp_mod = regexp_mod + "((?=.*?\\b" + regexpi_mod_array[index].to_s + "\\b))*" end; regexp_mod = regexp_mod + ").+";
quixa#sect_1#genialloyd#driv_job_str#job=infield[:driv_job_str]; jregexp_mod = "regexpi:([A-Za-z0-9])*";jregexpi_mod_array = job.split("/"); jregexpi_mod_array.each do |el| ; el.split("/"); el.each do |el2|; jregexp_mod = jregexp_mod + "(" + el2.to_s + ".*)*(\\s)*" end; end ; jregexp_mod = jregexp_mod + "\\b" ;
quixa#sect_1#genialloyd#veh_make_str#make=infield[:veh_make_str];  regexpi_mod_array = make.split(" "); regexp_mod = "regexpi:([A-Za-z0-9])*";regexpi_mod_array.each do |el|; regexp_mod = regexp_mod + "(" + el.to_s + ".*)+(\\s)*" end;regexp_mod = regexp_mod + "\\b"; 
quixa#sect_1#genialloyd#veh_model_str#make=infield[:veh_model_str]; make= make.gsub(/ª/, "a"); regexpi_mod_array = make.split(" "); regexp_mod = "regexpi:([A-Za-z0-9])*";regexpi_mod_array.each do |el|; regexp_mod = regexp_mod + "(" + el.to_s + ".*)+(\\s)*" end;regexp_mod = regexp_mod + "\\b"; 
quixa#sect_1#genialloyd#veh_set_up_str#make=infield[:veh_set_up_str]; make= make.gsub(/td/i, "turbodiesel"); make= make.gsub(/(?![0-9]+)p(\s)+/i, " porte"); regexpi_mod_array = make.split(" "); regexp_mod = "regexpi:([A-Za-z0-9])*";regexpi_mod_array.each do |el|; regexp_mod = regexp_mod + "(" + el.to_s + ".*)+(\\s)*" end;regexp_mod = regexp_mod + "\\b"; 
quixa#sect_1#linear#driv_job_str#job=infield[:driv_job_str]; jregexp_mod = "regexpi:([A-Za-z0-9])*";jregexpi_mod_array = job.split("/"); jregexpi_mod_array.each do |el| ; el.split("/"); el.each do |el2|; jregexp_mod = jregexp_mod + "(" + el2.to_s + ".*)*(\\s)*" end; end ; jregexp_mod = jregexp_mod + "\\b" ;
quixa#sect_1#linear#veh_make_str#make=infield[:veh_make_str];  regexpi_mod_array = make.split(" "); regexp_mod = "regexpi:([A-Za-z0-9])*";regexpi_mod_array.each do |el|; regexp_mod = regexp_mod + "(" + el.to_s + ".*)+(\\s)*" end;regexp_mod = regexp_mod + "\\b"; 
quixa#sect_1#linear#veh_model_str#make=infield[:veh_model_str];  regexpi_mod_array = make.split(" "); regexp_mod = "regexpi:([A-Za-z0-9])*";regexpi_mod_array.each do |el|; regexp_mod = regexp_mod + "(" + el.to_s + ".*)+(\\s)*" end;regexp_mod = regexp_mod + "\\b"; 
quixa#sect_1#linear#veh_set_up_str#make=infield[:veh_set_up_str];  regexpi_mod_array = make.split(" "); regexp_mod = "regexpi:([A-Za-z0-9])*(\\s)*(?=.*?\\b" + regexpi_mod_array[0].to_s + "+" ; index=0 ;for index in (1..regexpi_mod_array.length-1);regexp_mod = regexp_mod + "((?=.*?\\b" + regexpi_mod_array[index].to_s + "\\b))*" end; regexp_mod = regexp_mod + ").+";
quixa#sect_1#zurich_connect#driv_job_str#job=infield[:driv_job_str]; jregexp_mod = "regexpi:([A-Za-z0-9])*";jregexpi_mod_array = job.split("/"); jregexpi_mod_array.each do |el| ; el.split("/"); el.each do |el2|; jregexp_mod = jregexp_mod + "(" + el2.to_s + ".*)*(\\s)*" end; end ; jregexp_mod = jregexp_mod + "\\b" ;
quixa#sect_1#zurich_connect#veh_make_str#make=infield[:veh_make_str];  regexpi_mod_array = make.split(" "); regexp_mod = "regexpi:([A-Za-z0-9])*";regexpi_mod_array.each do |el|; regexp_mod = regexp_mod + "(" + el.to_s + ".*)+(\\s)*" end;regexp_mod = regexp_mod + "\\b"; 
quixa#sect_1#zurich_connect#veh_model_str#make=infield[:veh_model_str];  regexpi_mod_array = make.split(" "); regexp_mod = "regexpi:([A-Za-z0-9])*";regexpi_mod_array.each do |el|; regexp_mod = regexp_mod + "(" + el.to_s + ".*)+(\\s)*" end;regexp_mod = regexp_mod + "\\b"; 
quixa#sect_1#zurich_connect#veh_set_up_str#make=infield[:veh_set_up_str];  regexpi_mod_array = make.split(" "); regexp_mod = "regexpi:([A-Za-z0-9])*(\\s)*(?=.*?\\b" + regexpi_mod_array[0].to_s + "+" ; index=0 ;for index in (1..regexpi_mod_array.length-1);regexp_mod = regexp_mod + "((?=.*?\\b" + regexpi_mod_array[index].to_s + "\\b))*" end; regexp_mod = regexp_mod + ").+";
